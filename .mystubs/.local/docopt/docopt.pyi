# Stubs for docopt (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional as _Optional

class DocoptLanguageError(Exception): ...

class DocoptExit(SystemExit):
    usage = ...  # type: str
    def __init__(self, message: str = ...) -> None: ...

class Pattern:
    def __eq__(self, other): ...
    def __hash__(self): ...
    def fix(self): ...
    def fix_identities(self, uniq: _Optional[Any] = ...): ...
    def fix_repeating_arguments(self): ...
    @property
    def either(self): ...

class ChildPattern(Pattern):
    name = ...  # type: Any
    value = ...  # type: Any
    def __init__(self, name, value: _Optional[Any] = ...) -> None: ...
    def flat(self, *types): ...
    def match(self, left, collected: _Optional[Any] = ...): ...

class ParentPattern(Pattern):
    children = ...  # type: Any
    def __init__(self, *children) -> None: ...
    def flat(self, *types): ...

class Argument(ChildPattern):
    def single_match(self, left): ...
    @classmethod
    def parse(class_, source): ...

class Command(Argument):
    name = ...  # type: Any
    value = ...  # type: Any
    def __init__(self, name, value: bool = ...) -> None: ...
    def single_match(self, left): ...

class Option(ChildPattern):
    value = ...  # type: Any
    def __init__(self, short: _Optional[Any] = ..., long: _Optional[Any] = ..., argcount: int = ..., value: bool = ...) -> None: ...
    @classmethod
    def parse(class_, option_description): ...
    def single_match(self, left): ...
    @property
    def name(self): ...

class Required(ParentPattern):
    def match(self, left, collected: _Optional[Any] = ...): ...

class Optional(ParentPattern):
    def match(self, left, collected: _Optional[Any] = ...): ...

class AnyOptions(Optional): ...

class OneOrMore(ParentPattern):
    def match(self, left, collected: _Optional[Any] = ...): ...

class Either(ParentPattern):
    def match(self, left, collected: _Optional[Any] = ...): ...

class TokenStream(list):
    error = ...  # type: Any
    def __init__(self, source, error) -> None: ...
    def move(self): ...
    def current(self): ...

class Dict(dict): ...

def docopt(doc, argv: _Optional[Any] = ..., help: bool = ..., version: _Optional[Any] = ..., options_first: bool = ...): ...
